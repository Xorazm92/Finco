FinCo KPI Bot Uchun Mikroservis Arxitekturasi Konsepsiyasi

Sizning loyihangizdagi asosiy komponentlarni quyidagi potentsial mikroservislarga ajratish mumkin:

    Telegram Gateway Service (NestJS yoki boshqa Node.js freymvorki):

        Vazifasi: Telegram API bilan bevosita aloqa qilish, kiruvchi update'larni (xabarlar, buyruqlar) qabul qilish va ularni tegishli boshqa servislarga (odatda message queue orqali) yo'naltirish. Botdan foydalanuvchiga javob qaytarish uchun ham javobgar.

        Ichki Logika: Minimal biznes logikasi. Asosan marshrutlash va formatlash.

        Integratsiya: Telegram API, Message Queue (masalan, RabbitMQ, Kafka, yoki Redis Streams).

    User Management Service (NestJS):

        Vazifasi: Foydalanuvchilarni ro'yxatga olish, autentifikatsiya (agar API orqali kirish bo'lsa), avtorizatsiya (rollarni boshqarish), CRUD operatsiyalari.

        API Endpointlari: /users, /auth/login, /auth/register (agar bo'lsa), /roles.

        Ma'lumotlar Bazasi: O'zining alohida ma'lumotlar bazasiga ega bo'lishi yoki markaziy foydalanuvchilar bazasidan foydalanishi mumkin.

        Integratsiya: Boshqa servislar bilan API (REST/gRPC) yoki message queue orqali.

    Message Processing Service (NestJS):

        Vazifasi: Telegram Gateway'dan kelgan xabarlarni (message queue orqali) qabul qilish, ularni MessageLogEntityga yozish, dastlabki tahlil qilish (masalan, savolmi yoki yo'q), STT va SI tahlili uchun tegishli servislarga yuborish.

        Ichki Logika: MessageLogService, ResponseTimeTrackingServicening dastlabki qismlari.

        Integratsiya: Message Queue (kiruvchi xabarlar uchun), STT Service, AI Analysis Service, Ma'lumotlar Bazasi.

    STT Service (Python - WhisperS2T):

        Vazifasi: Ovozli xabarlarni matnga o'girish. Sizda bu allaqachon alohida mikroservis sifatida mavjud.

        API Endpointi: /transcribe (ovozli faylni qabul qiladi, matn qaytaradi).

        Integratsiya: Message Processing Service bilan API (HTTP) orqali.

    AI Analysis Service (NestJS yoki Python - Ollama bilan ishlash uchun):

        Vazifasi: Matnlarni (transkript qilingan yoki oddiy) LLM yordamida tahlil qilish (sentiment, javob sifati, mavzu, relevantlik).

        API Endpointlari (Yoki Message Queue Listener): /analyze/sentiment, /analyze/quality, /analyze/topic. Yoki message queue'dan vazifalarni qabul qiladi.

        Ichki Logika: Ollama bilan aloqa, prompt engineering, natijalarni AiAnalysisResultEntityga yozish.

        Integratsiya: Ollama, Message Queue (kiruvchi tahlil so'rovlari uchun), Human Feedback Service, Ma'lumotlar Bazasi.

    Human Feedback Service (NestJS):

        Vazifasi: SUPERVISOR tomonidan SI natijalariga berilgan baholarni qabul qilish va saqlash.

        API Endpointlari: /feedback (yangi feedback qo'shish, feedbacklarni ko'rish).

        Integratsiya: AI Analysis Service, Dashboard, Ma'lumotlar Bazasi.

    KPI Calculation Service (NestJS):

        Vazifasi: Barcha yig'ilgan ma'lumotlar (MessageLog, ReportLog, AttendanceLog, AiAnalysisResult, HumanFeedback) asosida KPI'larni hisoblash.

        Ichki Logika: KPI formulalari, davriy hisoblash (SchedulerService yoki message queue orqali trigger). Natijalarni KpiScoreEntityga yozish.

        Integratsiya: Ma'lumotlar Bazasi (barcha kerakli entitylardan o'qish), Message Queue (hisoblashni trigger qilish uchun).

    Report Management Service (NestJS):

        Vazifasi: Hisobot turlarini boshqarish, topshirilgan hisobotlarni qayd etish, muddatlarni nazorat qilish va eslatmalar yuborish.

        API Endpointlari (Agar Dashboarddan Boshqarilsa): /report-types, /submitted-reports.

        Integratsiya: Telegram Gateway Service (eslatmalar yuborish uchun), Ma'lumotlar Bazasi.

    Attendance Service (NestJS):

        Vazifasi: Ishga kelish-ketishni qayd etish (FaceID integratsiyasi yoki Telegram buyruqlari orqali).

        API Endpointi (FaceID Uchun Webhook): Agar FaceID webhook yuborsa.

        Integratsiya: FaceID tizimi, Telegram Gateway Service (buyruqlar uchun), Ma'lumotlar Bazasi.

    Payroll Service (NestJS):

        Vazifasi: Yakuniy ish haqi, bonus va jarimalarni hisoblash.

        Integratsiya: KPI Calculation Service (yoki KpiScoreEntitydan to'g'ridan-to'g'ri), User Management Service (oklad uchun), Ma'lumotlar Bazasi.

    API Gateway (NestJS yoki Maxsus Gateway: Kong, Nginx):

        Vazifasi: Barcha tashqi so'rovlarni (Frontend/Dashboard, ehtimol mobil ilovalar) qabul qilib, ularni tegishli mikroservislarga yo'naltirish. Autentifikatsiya, avtorizatsiya, rate limiting kabi umumiy vazifalarni bajarishi mumkin.

    Frontend Service (Dashboard - React/Vue/Angular):

        Bu sizda allaqachon alohida papkada. U API Gateway orqali kerakli mikroservislarga murojaat qiladi.

Servislararo Aloqa Mexanizmlari:

    Asinxron Aloqa (Message Queues - RabbitMQ, Kafka, Redis Streams):

        Bir servis boshqasidan darhol javob kutmasa ishlatiladi. Masalan, Telegram Gateway xabarni Message Processing Servicega yuboradi. Message Processing Service STT yoki AI Analysis uchun vazifani navbatga qo'yadi.

        Afzalliklari: Chidamlilik (bir servis ishlamay qolsa, xabar yo'qolmaydi), masshtablanuvchanlik (listener servislar sonini oshirish mumkin).

        Sizda BullModule (Redis) bilan buning poydevori bor, uni kengaytirish mumkin.

    Sinxron Aloqa (REST API yoki gRPC):

        Bir servis boshqasidan darhol javob kutsa ishlatiladi. Masalan, Frontend API Gateway orqali User Management Servicedan foydalanuvchi ma'lumotlarini so'raydi.

        gRPC RESTga qaraganda tezroq va samaraliroq bo'lishi mumkin, lekin sozlash biroz murakkabroq.

    Service Discovery (Consul, Eureka, Kubernetes'ning o'zining mexanizmi):

        Servislar bir-birining manzilini topa olishi uchun. Katta tizimlarda zarur.

    API Gateway: Yuqorida aytilganidek, yagona kirish nuqtasi.

Ma'lumotlar Bazalari:

    Har Bir Servis Uchun Alohida Baza (Tavsiya Etiladi): Bu servislar mustaqilligini ta'minlaydi. Lekin ma'lumotlar konsistentligini boshqarish qiyinlashadi (masalan, Saga pattern, Eventual Consistency).

    Umumiy Ma'lumotlar Bazasi (Ba'zi Guruh Servislar Uchun): Dastlabki bosqichda bir-biriga zich bog'liq bo'lgan servislar (masalan, User Management, Message Log, KPI Score) bitta ma'lumotlar bazasidan foydalanishi mumkin. Keyinchalik ajratish mumkin.

    Har Xil Turdagi Bazalar: Ba'zi servislar uchun NoSQL (masalan, MongoDB loglar uchun) yoki vaqtinchalik qatorlar (time-series) bazalari (masalan, InfluxDB monitoring uchun) mos kelishi mumkin.

Mikroservislar Uchun "Tayyor Qilib Berish" Amaliy Qadamlari (Hozirgi Monolitingizdan):

Sizning hozirgi NestJS loyihangiz yaxshi modullarga ajratilgan. Uni mikroservislarga o'tkazish uchun:

    Servis Chegaralarini Aniq Belgilang: Yuqoridagi ro'yxatdagi qaysi "xususiyat" modullari alohida servis bo'lishi kerakligini aniqlang. Masalan, UserManagementModule alohida UserManagementService bo'lishi mumkin.

    Aloqa Interfeyslarini Loyihalang: Har bir servis qanday API endpointlarini taqdim etadi yoki qanday xabarlarni message queue orqali qabul qiladi/yuboradi?

    Birinchi Servisni Ajrating (Masalan, STT Service yoki User Management Service):

        Yangi NestJS (yoki Python) loyihasi yarating.

        Mavjud monolitdagi tegishli modul kodini unga ko'chiring.

        Uning boshqa modullar bilan aloqasini API chaqiruvlari yoki message queue orqali qayta yozing.

        Uning o'zining ma'lumotlar bazasi (yoki umumiy bazaning bir qismi) bilan ishlashini sozlang.

    Docker Konteynerlaridan Foydalaning: Har bir mikroservisni o'zining Docker konteyneriga joylashtiring. Bu joylashtirishni va masshtablashni osonlashtiradi. Docker Compose lokal ishlab chiqish uchun qulay. Kubernetes production uchun.

    API Gatewayni Sozlang: Dastlab NestJSning o'zida oddiy proxy yoki marshrutlash logikasi bilan boshlash mumkin.

    Message Queue Tizimini Tanlang va Integratsiya Qiling: Redis (BullMQ bilan) yaxshi boshlanish.

    Monitoring va Loglashni Markazlashtiring: Har bir servisning loglarini va metrikalarini yagona joyga yig'ish (ELK, Prometheus/Grafana).

Xulosa:

Mikroservis arxitekturasi – bu katta va murakkab yondashuv. Unga o'tishdan oldin aniq ehtiyoj va resurslar bo'lishi kerak. Sizning hozirgi holatingizda, avval mavjud monolitni yaxshilab "jonlantirib", Telegram botining asosiy funksiyalarini to'liq ishga tushirib, ma'lumotlar bazasiga yozish muammolarini hal qilganingiz ma'qul.

Shundan so'ng, agar loyiha haqiqatan ham katta yuklamalarga duch kelsa, jamoa kengaysa yoki ba'zi qismlar uchun boshqa texnologiyalar kerak bo'lsa, yuqoridagi mikroservis konsepsiyasi asosida bosqichma-bosqich ajratishni boshlashingiz mumkin.

Hozirgi eng muhim vazifa – mavjud kod bazasidagi xatoliklarni tuzatib, Telegram botini ishchi holatga keltirish! Mikroservislar – bu keyingi evolyutsiya bosqichi bo'lishi mumkin.